// pages/api/tilda-debug.js
/**
 * –í–ï–†–°–ò–Ø: Debug endpoint –¥–ª—è –∑–∞—è–≤–æ–∫ –∏–∑ –¢–∏–ª—å–¥—ã
 * - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–∫–∞–∫ –µ—Å—Ç—å" (received)
 * - –î–æ–±–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (ip, userAgent, contentType)
 * - –ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–ª—é—á–∏ –∫ —á–∏—Ç–∞–µ–º–æ–º—É –≤–∏–¥—É (normalized), –ù–û –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–µ—Ç
 * - –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥—É–±–ª–∏—Ä—É–µ—Ç –≤ –ª–æ–≥–∏ Vercel (console.log)
 *
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –¢–∏–ª—å–¥–µ:
 *   https://<–≤–∞—à-–¥–æ–º–µ–Ω>.vercel.app/api/tilda-debug?token=raskat_2025_secret
 */

export const config = {
  api: {
    bodyParser: true, // —Ä–∞–∑–±–∏—Ä–∞–µ—Ç x-www-form-urlencoded –∏ json (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –¥–∞)
  },
};

function first(v) {
  return Array.isArray(v) ? v[0] : v;
}

// –ú—è–≥–∫–∏–π –≥–µ—Ç—Ç–µ—Ä: –≤–µ—Ä–Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ª—é–±–æ–º—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–ª—é—á–µ–π (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –±–µ–∑)
function getAny(obj, variants = []) {
  const map = new Map(
    Object.keys(obj || {}).map((k) => [k.toLowerCase(), obj[k]]),
  );
  for (const v of variants) {
    const hit = map.get(String(v).toLowerCase());
    if (hit !== undefined) return first(hit);
  }
  return '';
}

export default async function handler(req, res) {
  // ===== 0) –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): —Ç–æ–∫–µ–Ω –≤ query =====
  const REQUIRED_TOKEN = 'raskat_2025_secret'; // –ø–æ–º–µ–Ω—è–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  const incomingToken = (req.query?.token || '').toString();
  if (!incomingToken || incomingToken !== REQUIRED_TOKEN) {
    return res.status(401).json({ error: 'unauthorized' });
  }

  // ===== 1) –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∏ GET (GET –≤–µ—Ä–Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É) =====
  if (req.method === 'GET') {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    return res.status(200).end(
      JSON.stringify(
        {
          ok: true,
          how_to_use:
            '–û—Ç–ø—Ä–∞–≤—å POST –∏–∑ –¢–∏–ª—å–¥—ã —Å—é–¥–∞. –û—Ç–≤–µ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –ø–æ–ª—è –∫–∞–∫ –æ–Ω–∏ –ø—Ä–∏—à–ª–∏ (received).',
          example_curl: `curl -X POST "https://${req.headers.host}/api/tilda-debug?token=${REQUIRED_TOKEN}" -H "Content-Type: application/x-www-form-urlencoded" --data "name=Ivan&email=ivan@example.com&Days=2&Start_Time=10:00&End_time=15:00&daterec=10.10.2025&delivery=–°–∞–º–æ–≤—ã–≤–æ–∑&Products=FX3&Price=120 EUR&comment=–¢–µ—Å—Ç"`,
        },
        null,
        2,
      ),
    );
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Only POST allowed' });
  }

  // ===== 2) –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ =====
  const contentType = req.headers['content-type'] || '';
  const ip =
    (req.headers['x-forwarded-for'] || '')
      .toString()
      .split(',')[0]
      .trim() || req.socket?.remoteAddress || '';
  const userAgent = req.headers['user-agent'] || '';

  // ===== 3) –ß—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—Å–ª–∞–ª–∞ –¢–∏–ª—å–¥–∞ =====
  // Next bodyParser —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç x-www-form-urlencoded –∏ JSON –≤ req.body
  const received = req.body && typeof req.body === 'object' ? req.body : {};

  // ===== 4) –ú—è–≥–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è) =====
  // –ù–∏—á–µ–≥–æ –Ω–µ "–ø—Ä–∏–¥—É–º—ã–≤–∞–µ–º": —Ç–æ–ª—å–∫–æ –±–µ—Ä—ë–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  const normalized = {
    // –∏–º–µ–Ω–∞ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ñ–æ—Ä–º—ã –∫ —Ñ–æ—Ä–º–µ ‚Äî –Ω–∏–∂–µ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
    name: getAny(received, ['name', 'first_name', 'firstname']),
    last_name: getAny(received, ['last_name', 'lastname', 'surname']),
    email: getAny(received, ['email', 'mail']),
    phone: getAny(received, ['phone', 'tel', 'phone_number']),

    date: getAny(received, ['daterec', 'date', '–î–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã*']),
    days: getAny(received, ['days', 'Days', '–ö–æ–ª-–≤–æ —Å—É—Ç–æ–∫']),
    start_time: getAny(received, ['start_time', 'Start_Time', '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã*']),
    end_time: getAny(received, ['end_time', 'End_time', '–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –∞—Ä–µ–Ω–¥—ã']),

    delivery_method: getAny(received, ['delivery', '–î–æ—Å—Ç–∞–≤–∫–∞']),
    products_text: getAny(received, ['Products', 'products', '–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞']),
    total: getAny(received, ['Price', 'total', '–ò—Ç–æ–≥–æ']),
    comment: getAny(received, ['comment', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 'message']),
  };

  const payload = {
    meta: { ip, userAgent, contentType, now: new Date().toISOString() },
    received, // –≤—Å—ë –∫–∞–∫ –ø—Ä–∏—à–ª–æ
    normalized, // —É–¥–æ–±–Ω–æ —á–∏—Ç–∞—Ç—å
    hint:
      "–°–º–æ—Ç—Ä–∏ –∫–ª—é—á–∏ –≤ 'received'. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç –≤ 'normalized', –¥–æ–±–∞–≤—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ getAny(...). –ü–æ–ª–µ 'received' ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã.",
  };

  // ===== 5) –õ–æ–≥–∏ Vercel =====
  console.log('üü¢ /api/tilda-debug payload:\n', JSON.stringify(payload, null, 2));

  // ===== 6) –û—Ç–≤–µ—Ç =====
  res.setHeader('Content-Type', 'application/json; charset=utf-8');
  return res.status(200).end(JSON.stringify(payload, null, 2));
}
